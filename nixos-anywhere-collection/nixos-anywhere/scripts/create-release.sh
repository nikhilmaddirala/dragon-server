#!/usr/bin/env nix
#! nix shell nixpkgs#bash nixpkgs#gnused nixpkgs#gh --command bash

set -euo pipefail

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null && pwd)"
cd "$SCRIPT_DIR/.."
readonly repo_url="git@github.com:nix-community/nixos-anywhere"

version=${1:-}
if [[ -z $version ]]; then
  echo "USAGE: $0 version" >&2
  exit 1
fi

if [[ "$(git symbolic-ref --short HEAD)" != "main" ]]; then
  echo "must be on main branch" >&2
  exit 1
fi

# ensure we are up-to-date
uncommitted_changes=$(git diff --compact-summary)
if [[ -n $uncommitted_changes ]]; then
  echo -e "There are uncommitted changes, exiting:\n${uncommitted_changes}" >&2
  exit 1
fi
git pull "$repo_url" main
unpushed_commits=$(git log --format=oneline origin/main..main)
if [[ -n $unpushed_commits ]]; then
  echo -e "\nThere are unpushed changes, exiting:\n$unpushed_commits" >&2
  exit 1
fi

if ! gh auth status &>/dev/null; then
  gh auth login
fi

git branch -D "release-${version}" || true
git checkout -b "release-${version}"

sed -i -e "s!version = \".*\";!version = \"${version}\";!" src/default.nix
git add src/default.nix

git commit -m "bump version ${version}"
git push origin "release-${version}"
gh pr create \
  --base main \
  --head "release-${version}" \
  --title "Release ${version}" \
  --body "Release ${version} of nixos-anywhere"

gh pr merge --auto "release-${version}"
git checkout main

while true; do
  if gh pr view "release-${version}" | grep -q 'MERGED'; then
    break
  fi
  echo "Waiting for PR to be merged..."
  sleep 5
done
git pull "$repo_url" main
gh release create "${version}" --draft --generate-notes
gh release view "${version}" --web
echo "Please clean up the autogenerated release notes and then publish the release"
